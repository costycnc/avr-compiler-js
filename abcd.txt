    .org 0
    rjmp init
     .org 0x68
    init:
   rcall init_uart
read:
   rcall read_byte
 out 5,r16
rjmp read
   


; --- init_uart: inizializza UART a 9600 baud, 8N1, RX e TX abilitati ---
init_uart:
    ldi r16, 103           ; Baud rate low byte = 103 per 9600 baud @16MHz
    sts 0xC4, r16          ; UBRR0L: baud rate register low byte
    ldi r16, 0
    sts 0xC5, r16          ; UBRR0H: baud rate register high byte
    ldi r16, 0b00000110    ; UCSZ01=1 (bit 2), UCSZ00=1 (bit 1) => 8 bit data frame
    sts 0xC2, r16          ; UCSR0C: USART control and status register C
    ldi r16, 0b00011000    ; RXEN0=1 (bit 4), TXEN0=1 (bit 3) => abilita ricevitore e trasmettitore
    sts 0xC1, r16          ; UCSR0B: USART control and status register B
    ret                    ; ritorna dalla subroutine

; --- read_byte: attende che sia disponibile un byte e lo legge in r16 ---
read_byte:
    lds r18, 0xC0          ; UCSR0A: leggi stato USART
wait_loop:
    sbrc r18, 7            ; controlla RXC0 (bit 7), skip se 1 (dato pronto)
    rjmp read_done         ; se dato pronto, esci dal loop
    lds r18, 0xC0          ; aggiorna stato USART
    rjmp wait_loop         ; ripeti finch√© non arriva dato
read_done:
    lds r16, 0xC6          ; UDR0: leggi il byte ricevuto
    ret
